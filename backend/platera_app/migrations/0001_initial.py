# Generated by Django 4.2.23 on 2025-08-21 18:12

import cloudinary.models
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('user_type', models.CharField(choices=[('ADMIN', 'Admin'), ('MANAGER', 'Manager'), ('STAFF', 'Staff'), ('CUSTOMER', 'Customer')], default='CUSTOMER', max_length=10)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='category_image')),
                ('image_public_id', models.CharField(blank=True, max_length=255, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('display_order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['display_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subcategories', to='platera_app.inventorycategory')),
            ],
            options={
                'verbose_name_plural': 'Inventory Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('sku', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('barcode', models.CharField(blank=True, max_length=100, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('item_type', models.CharField(choices=[('INGREDIENT', 'Ingredient'), ('PACKAGING', 'Packaging Material'), ('CLEANING', 'Cleaning Supply'), ('OFFICE', 'Office Supply'), ('EQUIPMENT', 'Equipment'), ('OTHER', 'Other')], default='INGREDIENT', max_length=20)),
                ('quantity_in_stock', models.DecimalField(decimal_places=3, default=0, max_digits=12)),
                ('reorder_level', models.DecimalField(decimal_places=3, default=0, max_digits=12)),
                ('reorder_quantity', models.DecimalField(decimal_places=3, default=0, max_digits=12)),
                ('cost_per_unit', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('average_cost', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('selling_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('supplier_sku', models.CharField(blank=True, max_length=100, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_tracked', models.BooleanField(default=True, help_text='Track quantity changes for this item')),
                ('storage_location', models.CharField(blank=True, max_length=100, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='inventory/')),
                ('notes', models.TextField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items', to='platera_app.inventorycategory')),
            ],
            options={
                'verbose_name_plural': 'Inventory Items',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='KOT',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('kot_number', models.CharField(editable=False, max_length=20, unique=True)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PREPARING', 'Preparing'), ('READY', 'Ready'), ('SERVED', 'Served'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('prepared_at', models.DateTimeField(blank=True, null=True)),
                ('served_at', models.DateTimeField(blank=True, null=True)),
                ('is_priority', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, help_text='Special instructions for the kitchen', null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_kots', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Kitchen Order Ticket',
                'verbose_name_plural': 'Kitchen Order Tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('reference', models.CharField(blank=True, help_text='External reference number', max_length=50, null=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('PREPARING', 'Preparing'), ('READY', 'Ready to Serve'), ('SERVED', 'Served'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=20)),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('PARTIALLY_PAID', 'Partially Paid'), ('REFUNDED', 'Refunded'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('payment_method', models.CharField(blank=True, choices=[('CASH', 'Cash'), ('CARD', 'Credit/Debit Card'), ('UPI', 'UPI'), ('WALLET', 'Digital Wallet'), ('ONLINE', 'Online Payment'), ('OTHER', 'Other')], max_length=20, null=True)),
                ('subtotal', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('service_charge', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('rounding_adjustment', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('grand_total', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('packaging_charge', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('delivery_charge', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('customer_name', models.CharField(blank=True, max_length=255, null=True)),
                ('customer_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('customer_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_takeaway', models.BooleanField(default=False)),
                ('is_delivery', models.BooleanField(default=False)),
                ('estimated_ready_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, help_text='Special instructions', null=True)),
                ('internal_notes', models.TextField(blank=True, help_text='Staff only notes', null=True)),
                ('payment_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_date', models.DateTimeField(blank=True, null=True)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL)),
                ('staff', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='served_orders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', cloudinary.models.CloudinaryField(blank=True, max_length=255, null=True, verbose_name='product_image')),
                ('image_public_id', models.CharField(blank=True, max_length=255, null=True)),
                ('sku', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_available', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_vegetarian', models.BooleanField(default=False)),
                ('is_vegan', models.BooleanField(default=False)),
                ('is_gluten_free', models.BooleanField(default=False)),
                ('is_spicy', models.BooleanField(default=False)),
                ('calories', models.PositiveIntegerField(blank=True, null=True)),
                ('preparation_time', models.PositiveIntegerField(default=15, help_text='Preparation time in minutes')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='platera_app.category')),
            ],
            options={
                'verbose_name_plural': 'Products',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of the recipe', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Brief description of the recipe', null=True)),
                ('instructions', models.TextField(help_text='Step-by-step preparation instructions')),
                ('preparation_time', models.PositiveIntegerField(help_text='Preparation time in minutes')),
                ('cooking_time', models.PositiveIntegerField(help_text='Cooking time in minutes')),
                ('servings', models.PositiveIntegerField(help_text='Number of servings this recipe makes')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this recipe is currently in use')),
                ('product', models.OneToOneField(blank=True, help_text='Product this recipe is for', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recipe', to='platera_app.product')),
            ],
            options={
                'verbose_name': 'Recipe',
                'verbose_name_plural': 'Recipes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=200)),
                ('contact_person', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('tax_id', models.CharField(blank=True, max_length=50, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('table_number', models.CharField(help_text='Unique identifier for the table', max_length=10, unique=True)),
                ('name', models.CharField(blank=True, help_text='Optional display name', max_length=100, null=True)),
                ('capacity', models.PositiveIntegerField(help_text='Maximum number of people that can be seated')),
                ('min_capacity', models.PositiveIntegerField(default=1, help_text='Minimum number of people recommended')),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('OCCUPIED', 'Occupied'), ('RESERVED', 'Reserved'), ('CLEANING', 'Cleaning'), ('MAINTENANCE', 'Under Maintenance')], default='AVAILABLE', max_length=15)),
                ('shape', models.CharField(choices=[('RECTANGLE', 'Rectangle'), ('SQUARE', 'Square'), ('ROUND', 'Round'), ('BOOTH', 'Booth')], default='RECTANGLE', max_length=10)),
                ('section', models.CharField(blank=True, help_text='Restaurant section/area', max_length=50, null=True)),
                ('floor', models.PositiveIntegerField(default=1, help_text='Floor number')),
                ('x_position', models.PositiveIntegerField(blank=True, help_text='X position for floor plan', null=True)),
                ('y_position', models.PositiveIntegerField(blank=True, help_text='Y position for floor plan', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_mergeable', models.BooleanField(default=True, help_text='Can this table be merged with others?')),
                ('has_outlet', models.BooleanField(default=False, help_text='Table has power outlet')),
                ('is_outdoor', models.BooleanField(default=False, help_text='Is this an outdoor table?')),
                ('notes', models.TextField(blank=True, help_text='Special instructions or notes about this table', null=True)),
                ('last_cleaned', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UnitOfMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('abbreviation', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('employee_id', models.CharField(editable=False, max_length=20, unique=True)),
                ('badge_number', models.CharField(blank=True, max_length=20, null=True)),
                ('position', models.CharField(choices=[('MANAGER', 'Restaurant Manager'), ('SUPERVISOR', 'Shift Supervisor'), ('HOST', 'Host/Hostess'), ('WAITER', 'Waiter/Waitress'), ('BARTENDER', 'Bartender'), ('CHEF', 'Head Chef'), ('SOUS_CHEF', 'Sous Chef'), ('LINE_COOK', 'Line Cook'), ('PASTRY_CHEF', 'Pastry Chef'), ('DISHWASHER', 'Dishwasher'), ('BARISTA', 'Barista'), ('CASHIER', 'Cashier'), ('RUNNER', 'Food Runner'), ('DELIVERY', 'Delivery Driver'), ('CLEANING', 'Cleaning Staff')], max_length=20)),
                ('department', models.CharField(blank=True, choices=[('MANAGEMENT', 'Management'), ('FRONT_OF_HOUSE', 'Front of House'), ('KITCHEN', 'Kitchen'), ('BAR', 'Bar'), ('BAKERY', 'Bakery'), ('DELIVERY', 'Delivery'), ('HOUSEKEEPING', 'Housekeeping')], max_length=20, null=True)),
                ('hire_date', models.DateField(default=django.utils.timezone.now)),
                ('termination_date', models.DateField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_full_time', models.BooleanField(default=True)),
                ('shift_preference', models.CharField(blank=True, choices=[('MORNING', 'Morning (6AM-2PM)'), ('AFTERNOON', 'Afternoon (2PM-10PM)'), ('NIGHT', 'Night (10PM-6AM)'), ('SPLIT', 'Split Shift'), ('FLEXIBLE', 'Flexible')], max_length=20, null=True)),
                ('weekly_hours', models.PositiveIntegerField(default=40, help_text='Scheduled hours per week')),
                ('salary', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly salary', max_digits=12, null=True)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, help_text='Hourly rate for part-time staff', max_digits=6, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=100, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('emergency_contact_relation', models.CharField(blank=True, max_length=50, null=True)),
                ('id_proof', models.FileField(blank=True, null=True, upload_to='staff/id_proofs/')),
                ('resume', models.FileField(blank=True, null=True, upload_to='staff/resumes/')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='staff/photos/')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the staff member', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Staff Profile',
                'verbose_name_plural': 'Staff Profiles',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('party_size', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('CONFIRMED', 'Confirmed'), ('SEATED', 'Seated'), ('COMPLETED', 'Completed'), ('CANCELLED', 'Cancelled'), ('NO_SHOW', 'No Show')], default='PENDING', max_length=20)),
                ('special_requests', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to=settings.AUTH_USER_MODEL)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='platera_app.table')),
            ],
            options={
                'verbose_name': 'Reservation',
                'verbose_name_plural': 'Reservations',
                'ordering': ['-reservation_date', '-start_time'],
            },
        ),
        migrations.CreateModel(
            name='RecipeItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Quantity needed per serving', max_digits=10)),
                ('notes', models.TextField(blank=True, help_text='Special preparation instructions', null=True)),
                ('is_optional', models.BooleanField(default=False, help_text='Can this ingredient be omitted?')),
                ('inventory_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='used_in_products', to='platera_app.inventoryitem')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_items', to='platera_app.product')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='recipe_items', to='platera_app.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Recipe Item',
                'verbose_name_plural': 'Recipe Items',
                'ordering': ['product__name', 'inventory_item__name'],
                'unique_together': {('product', 'inventory_item')},
            },
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=3, help_text='Quantity needed for the recipe', max_digits=10)),
                ('preparation_notes', models.TextField(blank=True, help_text='Special preparation instructions', null=True)),
                ('is_optional', models.BooleanField(default=False, help_text='Whether this ingredient can be omitted')),
                ('step', models.PositiveIntegerField(default=1, help_text='Step number in the recipe when this ingredient is used')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('inventory_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipe_ingredients', to='platera_app.inventoryitem')),
                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ingredients', to='platera_app.recipe')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='recipe_ingredients', to='platera_app.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Recipe Ingredient',
                'verbose_name_plural': 'Recipe Ingredients',
                'ordering': ['recipe', 'step', 'inventory_item__name'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('bio', models.TextField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CARD', 'Credit/Debit Card'), ('ONLINE', 'Online Payment'), ('WALLET', 'Digital Wallet')], max_length=20)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(default='COMPLETED', max_length=20)),
                ('payment_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True, null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='platera_app.order')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(blank=True, help_text='Name at the time of ordering', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Description at the time of ordering', null=True)),
                ('quantity', models.DecimalField(decimal_places=2, default=1, max_digits=10)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('tax_rate', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PREPARING', 'Preparing'), ('READY', 'Ready to Serve'), ('SERVED', 'Served'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('prepared_at', models.DateTimeField(blank=True, null=True)),
                ('served_at', models.DateTimeField(blank=True, null=True)),
                ('special_instructions', models.TextField(blank=True, null=True)),
                ('is_priority', models.BooleanField(default=False)),
                ('kitchen_notes', models.TextField(blank=True, help_text='Internal notes for kitchen staff', null=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='platera_app.order')),
                ('prepared_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prepared_items', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='order_items', to='platera_app.product')),
                ('served_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='served_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Order Item',
                'verbose_name_plural': 'Order Items',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='order',
            name='table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to='platera_app.table'),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('ORDER', 'New Order'), ('RESERVATION', 'New Reservation'), ('LOW_STOCK', 'Low Stock Alert'), ('SYSTEM', 'System Notification'), ('PROMOTION', 'Promotion')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('related_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('related_object_type', models.CharField(blank=True, max_length=50, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='KOTItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PREPARING', 'Preparing'), ('READY', 'Ready'), ('SERVED', 'Served'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('notes', models.TextField(blank=True, null=True)),
                ('kot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kot_items', to='platera_app.kot')),
                ('order_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kot_items', to='platera_app.orderitem')),
            ],
            options={
                'verbose_name': 'KOT Item',
                'verbose_name_plural': 'KOT Items',
            },
        ),
        migrations.AddField(
            model_name='kot',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='kots', to='platera_app.order'),
        ),
        migrations.AddField(
            model_name='kot',
            name='prepared_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prepared_kots', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='kot',
            name='served_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='served_kots', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='kot',
            name='table',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='platera_app.table'),
        ),
        migrations.CreateModel(
            name='InventoryTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_type', models.CharField(choices=[('PURCHASE', 'Purchase'), ('USAGE', 'Usage'), ('ADJUSTMENT', 'Adjustment'), ('WASTAGE', 'Wastage'), ('RETURN', 'Return to Supplier'), ('TRANSFER', 'Transfer'), ('PRODUCTION', 'Production'), ('CONSUMPTION', 'Consumption')], max_length=20)),
                ('quantity', models.DecimalField(decimal_places=3, max_digits=12)),
                ('unit_price', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0, help_text='Total cost of this transaction', max_digits=12)),
                ('total_cost', models.DecimalField(decimal_places=2, default=0, help_text='Alias for total_amount for backward compatibility', max_digits=12)),
                ('reference', models.CharField(blank=True, max_length=100, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_transactions', to=settings.AUTH_USER_MODEL)),
                ('inventory_item', models.ForeignKey(blank=True, help_text='Reference to the inventory item', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='platera_app.inventoryitem')),
                ('unit', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='platera_app.unitofmeasurement')),
            ],
            options={
                'verbose_name': 'Inventory Transaction',
                'verbose_name_plural': 'Inventory Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='preferred_supplier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inventory_items', to='platera_app.supplier'),
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='products',
            field=models.ManyToManyField(related_name='inventory_items', through='platera_app.RecipeItem', to='platera_app.product'),
        ),
        migrations.AddField(
            model_name='inventoryitem',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='inventory_items', to='platera_app.unitofmeasurement'),
        ),
    ]
